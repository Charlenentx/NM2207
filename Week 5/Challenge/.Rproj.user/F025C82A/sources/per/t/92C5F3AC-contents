---
title: "Challenge-5"
author: "Ng Chee Ting"
date: "`r Sys.Date()`"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Questions
<br>

#### Question-1: Local Variable Shadowing 

Create an R function that defines a global variable called `x` with a value of 5. Inside the function, declare a local variable also named `x` with a value of 10. Print the value of `x` both inside and outside the function to demonstrate shadowing.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
x <- 5
print(paste("Outside Function: ", x))

local_x <- function() {
  x<-10
  print(paste("Inside Function:", x))
}
  local_x()


```
<br>

#### Question-2: Modify Global Variable

Create an R function that takes an argument and adds it to a global variable called `total`. Call the function multiple times with different arguments to accumulate the values in `total`.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
total<-0
add_total <- function(x) {
  total<<- total +x
  
}
add_total(2)
print(total)
add_total(4)
print(total)
add_total(6)
print(total)
```
<br>

#### Question-3: Global and Local Interaction 

Write an R program that includes a global variable `total` with an initial value of 100. Create a function that takes an argument, adds it to `total`, and returns the updated `total`. Demonstrate how this function interacts with the global variable.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
total <-100
add_total<- function(x){
  total<<-total + x

}
   print(add_total(10))


  
```
<br>

#### Question-4: Nested Functions

Define a function `outer_function` that declares a local variable `x` with a value of 5. Inside `outer_function`, define another function `inner_function` that prints the value of `x`. Call both functions to show how the inner function accesses the variable from the outer function's scope.

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
outer_function<-function() {
  x<-5
  inner_function<-function(){
  print(x)
  }
 inner_function()
}
outer_function()

```
<br>

#### Question-5: Meme Generator Function

Create a function that takes a text input and generates a humorous meme with the text overlaid on an image of your choice. You can use the `magick` package for image manipulation. You can find more details about the commands offered by the package, with some examples of annotating images here: https://cran.r-project.org/web/packages/magick/vignettes/intro.html

**Solutions:**

```{r, eval=TRUE,echo=TRUE}
# Enter code here
library(magick)
input <- function(path, text) {
  giraffe <- image_read(path)
print(giraffe)
image_annotate(giraffe, print(paste0(text)), size = 49, gravity = "southwest", color = "green")
}
input("C:/Users/Cheeting/OneDrive/Pictures/giraffe.jfif","i love grass")                                                                         
```
<br>

#### Question-6: Text Analysis Game  

Develop a text analysis game in which the user inputs a sentence, and the R function provides statistics like the number of words, characters, and average word length. Reward the user with a "communication skill level" based on their input.

**Solutions:**
```{r, eval=TRUE,echo=TRUE}
# Enter code here
library(tidyverse)

input <- function(sentence) {
  words <- strsplit(sentence, " ")[[1]]
  num_words<-length(words)
  number_character<- nchar(sentence)
  average_word_length <- number_character/num_words 
  print(paste0("Number of words= ", num_words,
               " Number of characters= ", number_character,
               " Average word length= ", average_word_length
               ))
  ifelse (average_word_length >=5, print("Excellent"), print("Don't Give Up!"))
      
}
input("I love economics")   
                                                                  
       
```
<br>